{% extends 'layout.twig' %}

{% block body %}
	<div id="vote-wrapper" class="vote-wrapper">
		<div class="container"> <!--page container -->
    	<div id="subtitles" class="text-box">
				<div id="sherman">
					<img id="sherman-face" src="images/default.png" width="200">
				</div>
			</div> <!--text box which will contain spoken text -->
		</div>
  </div>
	</div>
	<script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.0/annyang.min.js"></script>
	<script src="https://unpkg.com/compromise@latest/builds/compromise.min.js"></script>
	<script>
		let words = [];
		let author = [];
		let isEditing = true;
		let isSpeaking = false;
		let voices = window.speechSynthesis.getVoices();
		let subtitleText = null;
		let azureEndpoint = "https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/0ea575b0-9a48-4898-a49f-21ce0e8d37d1?verbose=true&timezoneOffset=0&subscription-key={{ azureluiskey }}&q=";
		let openweatherkey = "{{ openweatherkey }}";
		let shermanFaces = [ "images/default.png", "images/talk.png", "images/talk1.png" ];
		let currentShermanFace = 0;

		var shermanAnimate = setInterval( () => {
			if( isSpeaking ) {
				currentShermanFace = currentShermanFace > 1 ? 1 : 2;
			}
			else {
				currentShermanFace = 0;
			}
			$("#sherman-face").attr("src", shermanFaces[ currentShermanFace ] );
		}, 200 );

		var speechUtteranceChunker = function (utt, settings, callback) {
			settings = settings || {};
			var chunkLength = settings && settings.chunkLength || 160;
			var pattRegex = new RegExp('^.{' + Math.floor(chunkLength / 2) + ',' + chunkLength + '}[\.\!\?\,]{1}|^.{1,' + chunkLength + '}$|^.{1,' + chunkLength + '} ');
			var txt = (settings && settings.offset !== undefined ? utt.text.substring(settings.offset) : utt.text);
			var chunkArr = txt.match(pattRegex);

			if ( chunkArr && chunkArr[0] !== undefined && chunkArr[0].length > 2) {
				var chunk = chunkArr[0];
				var newUtt = new SpeechSynthesisUtterance(chunk);
				newUtt.voice = voices[6]; // Note: some voices don't support altering params
				newUtt.volume = 0.75; // 0 to 1
				newUtt.rate = 1; // 0.1 to 10
				newUtt.pitch = 1; //0 to 2
				newUtt.lang = 'en-US';
				for (x in utt) {
					if (utt.hasOwnProperty(x) && x !== 'text') {
						newUtt[x] = utt[x];
					}
				}
				newUtt.onend = function () {
					settings.offset = settings.offset || 0;
					settings.offset += chunk.length - 1;
					speechUtteranceChunker(utt, settings, callback);
				}
				console.log(newUtt); //IMPORTANT!! Do not remove: Logging the object out fixes some onend firing issues.
				//placing the speak invocation inside a callback fixes ordering and onend issues.
				setTimeout(function () {
					speechSynthesis.speak(newUtt);
				}, 0);
			} else {
				//call once all text has been spoken...
				if (callback !== undefined) {
					callback();
				}
			}
		}

		function shermanSays( message ) {
			var msg = new SpeechSynthesisUtterance();
			msg.voice = voices[6]; // Note: some voices don't support altering params
			// msg.voiceURI = 'native';
			msg.volume = 0.75; // 0 to 1
			msg.rate = 1; // 0.1 to 10
			msg.pitch = 1; //0 to 2
			msg.text = message.replace(/[^\w\s\.]/gi, '');
			msg.lang = 'en-US';

			if( !isSpeaking ) {
				isSpeaking = true;
				// speechSynthesis.speak(msg);
				speechUtteranceChunker(msg, { chunkLength:180 }, function(){
					//some code to execute when done
					console.log('done');
					isSpeaking = false;
				});
			}
		}

		function shermanParseDuration(text) {
			var result = 0;
			var duration = /(-?\d*\.?\d+(?:e[-+]?\d+)?)\s*([a-zμ]*)/ig;
			// ignore commas
  		text = text.replace(/(\d),(\d)/g, '$1$2')
  		text.replace(duration, function(_, n, units){
		    result += moment.duration(parseFloat(n, 10), units.toLowerCase());
		  });
			return result;
		}

		function shermanReminder(text) {
			var ms = shermanParseDuration( text );
			if( ms ) {
				shermanSays( "Okay, I will remind you" );
				setTimeout(() => {
					shermanSays( "Reminder alert BEEP BOOP for " + text );
					ComfyJS.Say( "Reminder alert BEEP BOOP for " + text );
				}, ms );
			}
		}

		function shermanPizza() {
			shermanSays( "pineapple belongs on pizza come at me bro" );
		}

		function shermanDefineItAll( word ) {
			$.ajax({
				url: `https://www.instafluff.tv/ComfyDictionary/web/${word}.json`,
				success: (result) => {
					console.log( result );
					if( result[ "definition" ] ) {
						shermanSays( result[ "definition" ] );
						console.log( result[ "definition" ] );
					}
					else {
						shermanSays( "Sorry, I could not find the word " + word );
					}
				}
			});
		}

		function shermanKnowitall(topic) {
			$.ajax({
				url: "https://api.duckduckgo.com/?q=" + topic + "&format=json",
				success: (result) => {
					var parsedResult = JSON.parse( result );
					if( parsedResult[ "Abstract" ] ) {
						shermanSays( parsedResult[ "Abstract" ] );
						console.log( parsedResult[ "Abstract" ] );
					}
					else {
						shermanSays( "Sorry, I could not find anything about " + topic );
					}
				}
			});
		}

		function shermanWeather(city) {
			$.ajax({
				url: "https://api.openweathermap.org/data/2.5/weather?q=" + city + "&appid=" + openweatherkey,
				success: (result) => {
					var tempCelsius = result[ "main" ].temp - 273.15;
					var tempFahrenheit = tempCelsius * 9 / 5 + 32;
					shermanSays( "The weather in " + result[ "name" ] + " is " + result[ "weather" ][0].description + " and is " + Math.round(tempCelsius) + " degrees celsius or " + Math.round(tempFahrenheit) + " degrees fahrenheit" );
					console.log( result );
				}
			});
		}

		function getCORS(url, success) {
			var xhr = new XMLHttpRequest();
			if (!('withCredentials' in xhr)) xhr = new XDomainRequest(); // fix IE8/9
			xhr.open('GET', url);
			xhr.setRequestHeader("Accept", "application/json");
			xhr.onload = success;
			xhr.send();
			return xhr;
		}

		function shermanDadjoke(term = "") {
			getCORS( term ? 'https://icanhazdadjoke.com/search?term=' + term : 'https://icanhazdadjoke.com', function(request){
				var response = request.currentTarget.response || request.target.responseText;
				var jokes = JSON.parse( response );
				console.log(jokes);
				if( jokes.joke ) {
					shermanSays( jokes.joke );
				}
				else if( jokes.results && jokes.results.length > 0 ) {
					shermanSays( jokes.results[ 0 ].joke.replace( /↵/g, " " ).replace( /\n/g, " " ) );
				}
				else {
					shermanSays( "Sorry, I don't know any jokes about " + term );
				}
			});
		}

		async function shermanCatFact() {
			getCORS( "https://cors-anywhere.herokuapp.com/https://cat-fact.herokuapp.com/facts/random", function(request){
				var response = request.currentTarget.response || request.target.responseText;
				var fact = JSON.parse( response );
				if( fact.text ) {
					shermanSays( fact.text );
				}
				else {
					shermanSays( "Sorry, I have no cat facts right meow." );
				}
			});
		}

		function shermanAzureIntent( command ) {
			console.log( "Command:", command );
			if( command ) {
				$.ajax({
					url: azureEndpoint + command,
					success: (result) => {
						console.log( "RESULT:", result );
						switch( result.topScoringIntent.intent ) {
							case "Dictionary":
								if( result.entities.length > 0 ) {
									shermanDefineItAll( result.entities[ 0 ].entity.split( " " ).pop() );
								}
								break;
							case "Weather.CheckWeatherValue":
								if( result.entities.length > 0 ) {
									shermanWeather( result.entities[ 0 ].entity );
								}
								break;
							case "ToDo.AddToDo":
								shermanReminder( command );
								break;
							case "Dad Joke":
								shermanDadjoke();
								break;
							case "Pizza":
								shermanPizza();
								break;
							case "CatFact":
								shermanCatFact();
								break;
						}
					}
				});
			}
		}

		function shermanCommand(command) {
			// shermanSays("did you say " + command);
			console.log("COMMAND:", command);
			let commandNlp = nlp(command);
			var parsed = "";
			if( command.includes( "this cord" ) || command.includes( "Discord" ) ) {
				shermanSays( "Come and hang out with us outside of stream as well!" );
				ComfyJS.Say( "!discord" );
			}
			else if( parsed = commandNlp.clauses().if('remind me in').out() ) {
				var reminder = parsed.replace("remind me in ", "");
				shermanReminder( reminder );
			}
			else if( command.includes( "GitHub" ) ) {
				shermanSays( "The projects we work on are available open-source on the Instafluff Github!" );
				ComfyJS.Say( "!github" );
			}
			else if( command.includes( "how's it going" ) || command.includes( "how is it going" ) ) {
				shermanSays( "I have a little code. How are you?" );
			}
			else if( parsed = commandNlp.clauses().if('tell #Noun the weather').out() ) {
				var matchPhrase = commandNlp.match('tell #Noun the weather in ').out().trim();
				var cityName = parsed.substring( parsed.indexOf( matchPhrase ) + matchPhrase.length );
				shermanWeather( cityName );
			}
			else if( command.startsWith( "how much is that doggy" ) ) {
				shermanSays( "the one with the waggly tail, I will add it to your basket" );
			}
			else if( parsed = commandNlp.clauses().if('tell #Noun about').out() ) {
				var matchPhrase = commandNlp.match('tell #Noun about ').out().trim();
				var query = parsed.substring( parsed.indexOf( matchPhrase ) + matchPhrase.length );
				shermanKnowitall( query );
			}
			else if( parsed = commandNlp.clauses().if('what is').out() ) {
				var matchPhrase = commandNlp.match('what is ').out().trim();
				var query = parsed.substring( parsed.indexOf( matchPhrase ) + matchPhrase.length );
				shermanKnowitall( query );
			}
			else if( parsed = commandNlp.clauses().if('tell #Noun a joke about').out() ) {
				var matchPhrase = commandNlp.match('tell #Noun a joke about ').out().trim();
				var topic = parsed.substring( parsed.indexOf( matchPhrase ) + matchPhrase.length );
				shermanDadjoke( topic );
			}
			else if( parsed = commandNlp.clauses().if('tell #Noun a joke').out() ) {
				shermanDadjoke();
			}
		}

		function detectShermanCommand( texts, phrases ) {
			for( var i = 0; i < texts.length; i++ ) {
				var text = texts[ i ];
				var phrase = phrases.find( p => text.indexOf( p ) !== -1 );
				if( phrase ) {
					let commandIndex = text.indexOf( phrase );
					if( commandIndex !== -1 ) {
						// sherman command is within a bunch of text!
						// shermanCommand( text.substring( commandIndex ).replace( phrase, "" ).trim() );
						shermanAzureIntent( text.substring( commandIndex ).replace( phrase, "" ).trim() );
						return true;
					}
				}
			}
			return false;
		}

		$( document ).ready(function() {
			setTimeout(() => {
				voices = window.speechSynthesis.getVoices();
				console.log( voices );
			}, 2000 );

			if (annyang) {
			  // Start listening. You can call this here, or attach this call to an event, button, etc.
			  annyang.start({ autoRestart: true, continuous: false });
				// annyang.setLanguage("es-MX");
				console.log("Started Voice Commands");
			  annyang.addCommands({
					// 'type in chat *message': function(message) {
					// 	ComfyJS.Say( message);
					// },
					// 'fisherman *command': shermanAzureIntent,
					// 'hey sherman *command': shermanAzureIntent,
					// 'comfy': function() {
					// 	shermanSays("Okay.");
					// 	ComfyJS.Say( "!comfy");
					// },
					// 'boing boing': function() {
					// 	shermanSays("Okay.");
					// 	ComfyJS.Say( "!boingboing");
					// },
					'holy cram': function() {
						shermanSays("Holy cows live in India");
					},
					'holy crap': function() {
						shermanSays("Holy cows live in India");
					},
					'holy cow': function() {
						shermanSays("Holy cows live in India");
					},
				});
				annyang.addCallback('soundstart', function() {
				  console.log('sound detected');
				});
				annyang.addCallback('result', function(phrases) {
					// "hey Sherman","he Sherman","a Sherman"/"fisherman"
					if( subtitleText ) {
						subtitleText.fadeOut(250, () => {
							subtitleText.remove();
							subtitleText = $("<p>" + phrases[0] + "</p>").appendTo( "#subtitles" );
						});
					}
					else {
						subtitleText = $("<p>" + phrases[0] + "</p>").appendTo( "#subtitles" );
					}
				  console.log("I think the user said:", phrases[0]);
				  console.log("But then again, it could be any of the following: ", phrases);
					detectShermanCommand( phrases,
						[ "hey Sherman", "a Sherman", "he Sherman", "hay Sherman", "Sherman", "fisherman" ]
						);
				});
			}

			ComfyJS.onChat = ( user, message, flags, self, extra ) => {
				console.log( flags, message, extra );
				if( flags.customReward &&
				 		extra.customRewardId === "cb9ac8d4-1104-467b-b44d-5e497402d492" ) {
					shermanSays( message.substring(0, 100) );
				}
			};
			ComfyJS.Init( "{{ username }}", "{{ oauth }}" );
		});
	</script>
{% endblock %}
